# Set the max size for file uploads to 50Mb
client_max_body_size 50M;

# vhost specific logs
access_log <%= "#{@log_dir}/#{@name}-#{@rails_env}" %>-access.log main buffer=32k;
error_log <%= "#{@log_dir}/#{@name}-#{@rails_env}" %>-error.log info;

# allow only valid crud methods
if ($request_method !~ GET|POST|PUT|DELETE) {
  return 405;
}

# ignore obviously false requests
if ($request_filename ~ \.(php.?|[ajk]sp[ax]?|[a-z]?html?|x|idc|log|cf[mc]?|mdb|do|(ms|f)?cgi|p(er)?lx?|nsf|dll|fts|exe|bat|dot|ini|com|pif|sh|sql|git|svn|yml)$) {
  return 404;
}

# opt-in to the future
add_header "X-UA-Compatible" "IE=Edge,chrome=1";

# doc root
root <%= @rails_root %>/current/public;

# redirect not found error to the static page /404.html
error_page 404 @400_errors;
location @400_errors {
  root <%= @rails_root %>/current/public;
  try_files 404.html /404.html = 404;
}

# redirect server error pages to the static page /50x.html
error_page 500 502 503 504 @500_errors;
location @500_errors {
  root <%= @rails_root %>/current/public;
  try_files 500.html /500.html = 500;
}


# this rewrites all the requests to the maintenance.html
# page if it exists in the doc root. This is for capistrano's
# disable web task
if (-f $document_root/system/maintenance.html) {
  rewrite ^(.*)$ /system/maintenance.html last;
  break;
}

# try to load static files and cached files before passing upstream
try_files $uri $uri/index.html $uri.html cache/$uri cache/$uri/index.html cache/$uri.html <%= "@#{@app_server["name"]}" if %w[thin unicorn].include?(@app_server["name"]) %>;

location @<%= @app_server["name"] %> {
  # an HTTP header important enough to have its own Wikipedia entry:
  #   http://en.wikipedia.org/wiki/X-Forwarded-For
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

  # enable this if and only if you use HTTPS, this helps Rack
  # set the proper protocol for doing redirects:
  proxy_set_header X-Forwarded-Proto https;

  # pass the Host: header from the client right along so redirects
  # can be set properly within the Rack application
  proxy_set_header Host $http_host;

  # we don't want nginx trying to do something clever with
  # redirects, we set the Host: header above already.
  proxy_redirect off;

  # set "proxy_buffering off" *only* for Rainbows! when doing
  # Comet/long-poll/streaming.  It's also safe to set if you're using
  # only serving fast clients with Unicorn + nginx, but not slow
  # clients.  You normally want nginx to buffer responses to slow
  # clients, even with Rails 3.1 streaming because otherwise a slow
  # client can become a bottleneck of Unicorn.
  #
  # The Rack application may also set "X-Accel-Buffering (yes|no)"
  # in the response headers do disable/enable buffering on a
  # per-response basis.
  # proxy_buffering off;

  proxy_pass http://rails_<%= @app_server["name"] %>;
}

# Don't cache html5 offline support files
location ~* ^.+\.(manifest|appcache)$ {
  expires -1;
  access_log <%= "#{@log_dir}/#{@name}-#{@rails_env}" %>-static.log;
  break;
}


# Expires headers on static assets
location ~ ^/(assets|images|javascripts|stylesheets|system)/ {
  expires max;
  add_header "Cache-Control" "public";
  access_log off;
  break;
}

# Set expires max on static file types (make sure you are using cache busting filenames or query params):
location ~* ^.+\.(css|js|jpg|jpeg|gif|png|ico|gz|svg|svgz|ttf|otf|woff|eot|mp4|ogg|ogv|webm)$ {
  expires max;
  add_header "Cache-Control" "public";
  access_log off;
  break;
}
