bash -c '
<%= "export http_proxy=\"#{knife_config[:bootstrap_proxy]}\"" if knife_config[:bootstrap_proxy] -%>

exists() {
  if command -v $1 &>/dev/null
  then
    return 0
  else
    return 1
  fi
}

install_sh="http://opscode.com/chef/install.sh"
version_string="-v <%= chef_version %>"

if ! exists /usr/bin/chef-client; then
  if exists wget; then
    bash <(wget <%= "--proxy=on " if knife_config[:bootstrap_proxy] %> ${install_sh} -O -) ${version_string}
  elif exists curl; then
    bash <(curl -L <%= "--proxy \"#{knife_config[:bootstrap_proxy]}\" " if knife_config[:bootstrap_proxy] %> ${install_sh}) ${version_string}
  else
    echo "Neither wget nor curl found. Please install one and try again." >&2
    exit 1
  fi
fi

mkdir -p /etc/chef

<%# Generate Ohai Hints -%>
<% unless @chef_config[:knife][:hints].nil? || @chef_config[:knife][:hints].empty? -%>
mkdir -p /etc/chef/ohai/hints

<% @chef_config[:knife][:hints].each do |name, hash| -%>
cat > /etc/chef/ohai/hints/<%= name %>.json <<'EOP'
<%= hash.to_json %>
EOP
<% end -%>
<% end -%>

mkdir -p /var/chef/cookbooks /var/chef/cache /var/chef/backup /var/chef/cache/checksums

cat > /etc/chef/solo.rb <<'EOP'
cookbook_path "/var/chef/cookbooks"
file_cache_path "/var/chef/cache"
file_backup_path "/var/chef/backup"
cache_options(:path => "/var/chef/cache/checksums")
json_attribs "/etc/chef/dna.json"
EOP

cat > /etc/chef/dna.json <<'EOP'
<%= first_boot.to_json %>
EOP

chef-solo
'
